<?php

namespace LG\MyAEBundle\Entity;

use Gedmo\Mapping\Annotation as Gedmo;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * Client
 *
 * @ORM\Table(name="client")
 * @ORM\Entity(repositoryClass="LG\MyAEBundle\Repository\ClientRepository")
 * @UniqueEntity(fields="name", message="Tu as déjà un client à ce nom.")
 */
class Client
{
    /**
    * @ORM\OneToMany(targetEntity="LG\MyAEBundle\Entity\Address", mappedBy="client", cascade={"remove", "persist"})
    * @Assert\Valid()
    */
    private $addresses;

    /**
    * @ORM\OneToMany(targetEntity="LG\MyAEBundle\Entity\Devis", mappedBy="client", cascade={"remove", "persist"})
    * @Assert\Valid()
    */
    private $deviss;

    /**
     * @var string $ownedBy
     *
     * @Gedmo\Blameable(on="create")
     * @ORM\Column
     */
    private $ownedBy;

    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, unique=true)
     * @Assert\NotBlank()
     */
    private $name;

      /**
       * @Gedmo\Slug(fields={"name"})
       * @ORM\Column(length=128, unique=true)
       */
      private $slug;

    /**
     * @var string
     *
     * @ORM\Column(name="referentName", type="string", length=255)
     * @Assert\NotBlank()
     */
    private $referentName;

    /**
     * @var string
     *
     * @ORM\Column(name="status", type="string", length=255)
     */
    private $status;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateAjout", type="datetime")
     * @Assert\DateTime()
     */
    private $dateAjout;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="dateActif", type="datetime")
     * @Assert\DateTime()
     */
    private $dateActif;

    /**
     * @var string
     *
     * @ORM\Column(name="mail", type="string", length=255)
     * @Assert\Email()
     */
    private $mail;

    /**
     * @var string
     *
     * @ORM\Column(name="telephone", type="string", length=255)
     */
    private $telephone;

    public function __construct()
    {
        $this->dateAjout = new \Datetime();
        $this->dateActif = new \Datetime();
        $this->addresses = new ArrayCollection();
    }


    /**
     * Get id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Client
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set referentName
     *
     * @param string $referentName
     *
     * @return Client
     */
    public function setReferentName($referentName)
    {
        $this->referentName = $referentName;

        return $this;
    }

    /**
     * Get referentName
     *
     * @return string
     */
    public function getReferentName()
    {
        return $this->referentName;
    }

    /**
     * Set status
     *
     * @param string $status
     *
     * @return Client
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set dateAjout
     *
     * @param \DateTime $dateAjout
     *
     * @return Client
     */
    public function setDateAjout($dateAjout)
    {
        $this->dateAjout = $dateAjout;

        return $this;
    }

    /**
     * Get dateAjout
     *
     * @return \DateTime
     */
    public function getDateAjout()
    {
        return $this->dateAjout;
    }

    /**
     * Set dateActif
     *
     * @param \DateTime $dateActif
     *
     * @return Client
     */
    public function setDateActif($dateActif)
    {
        $this->dateActif = $dateActif;

        return $this;
    }

    /**
     * Get dateActif
     *
     * @return \DateTime
     */
    public function getDateActif()
    {
        return $this->dateActif;
    }

    /**
     * Set mail
     *
     * @param string $mail
     *
     * @return Client
     */
    public function setMail($mail)
    {
        $this->mail = $mail;

        return $this;
    }

    /**
     * Get mail
     *
     * @return string
     */
    public function getMail()
    {
        return $this->mail;
    }

    /**
     * Set telephone
     *
     * @param string $telephone
     *
     * @return Client
     */
    public function setTelephone($telephone)
    {
        $this->telephone = $telephone;

        return $this;
    }

    /**
     * Get telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->telephone;
    }

    /**
     * Add address
     *
     * @param \LG\MyAEBundle\Entity\Address $address
     *
     * @return Client
     */
    public function addAddress(\LG\MyAEBundle\Entity\Address $address)
    {
        $this->addresses[] = $address;

        $address->setClient($this);

        return $this;
    }

    /**
     * Remove address
     *
     * @param \LG\MyAEBundle\Entity\Address $address
     */
    public function removeAddress(\LG\MyAEBundle\Entity\Address $address)
    {
        $this->addresses->removeElement($address);
    }

    /**
     * Get addresses
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getAddresses()
    {
        return $this->addresses;
    }

  /**
   * @Assert\Callback
   */
  public function isTelephoneValid(ExecutionContextInterface $context)
  {
    $tel = $this->getTelephone();
    if(!preg_match("#^0[1-68]([-. ]?[0-9]{2}){4}$#", $tel) && !preg_match("#^\+[0-9]{1,2}[1-68]([-. ]?[0-9]{2}){4}$#", $tel)){
      $context
        ->buildViolation('Le numéro de téléphone est invalide.') // message
        ->atPath('telephone')                                                   // attribut de l'objet qui est violé
        ->addViolation() // ceci déclenche l'erreur, ne l'oubliez pas
      ;
    }

  }

    /**
     * Set user
     *
     * @param \LG\UserBundle\Entity\User $user
     *
     * @return Client
     */
    public function setUser(\LG\UserBundle\Entity\User $user)
    {
        $this->user = $user;

        return $this;
    }

    /**
     * Get user
     *
     * @return \LG\UserBundle\Entity\User
     */
    public function getUser()
    {
        return $this->user;
    }

    /**
     * Set slug
     *
     * @param string $slug
     *
     * @return Client
     */
    public function setSlug($slug)
    {
        $this->slug = $slug;

        return $this;
    }

    /**
     * Get slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }

    /**
     * Set ownedBy
     *
     * @param string $ownedBy
     *
     * @return Client
     */
    public function setOwnedBy($ownedBy)
    {
        $this->ownedBy = $ownedBy;

        return $this;
    }

    /**
     * Get ownedBy
     *
     * @return string
     */
    public function getOwnedBy()
    {
        return $this->ownedBy;
    }
}
